sqlite3 favorites.db;
SELECT * FROM favorites;
SELECT language FROM favorites;
SELECT COUNT(*) FROM favorites;
SELECT COUNT(language) FROM favorites;
SELECT DISTINCT(language) FROM favorites;
SELECT DISTINCT(language) AS n FROM favorites;

.schema
-- shows all the created tables and their columns

WHERE
LIKE
ORDER BY
LIMIT
GROUP BY
...

SELECT COUNT(*) AS 'C:' FROM favorites WHERE language = 'C';
SELECT COUNT(*) FROM favorites WHERE language = 'C' AND problem = 'Mario';
SELECT language, COUNT(*) FROM favorites GROUP BY language ORDER BY COUNT(*) DESC;
SELECT language, COUNT(*) FROM favorites GROUP BY language ORDER BY COUNT(*) DESC LIMIT 1;

INSERT INTO favorites (language, problem) VALUES ('SQL', 'Fiftyville');

UPDATE table SET column = value WHERE condition;
-- NOTE: the WHERE clause is super important!!!!! without it, you'll replace every value in the table
UPDATE favorites SET language = 'C++' WHERE language = 'C';

DELETE FROM table WHERE condition;
-- this will wipe out all entries. gone forever.
DELETE FROM favorites WHERE problem = 'Tideman';


-- DATA TYPES for sqlite. real languages have more.
BLOB
-- binary large object(?)
INTEGER
NUMERIC
-- eg dates, times. standardizes everything.
REAL
-- floats
TEXT


NOT NULL
-- if a field is set to not null it can't be left blank
UNIQUE
-- has to be unique, can't be repeated


PRIMARY KEY
-- the unique identifier for that table. whatever you set.
FOREIGN KEY

-- e.g.:
CREATE TABLE stars (
    show_id INTEGER NOT NULL,
    person_id INTEGER NOT NULL,
    FOREIGN KEY(show_id) REFERENCES shows(id),
    FOREIGN KEY(person_id) REFERENCES people(id)
);

-- combining queries
-- this will get the title from shows where the id is inside the () query. means comedy titles.
SELECT title FROM shows WHERE id IN (SELECT show_id FROM genres WHERE genre = 'Comedy');


-- to get all shows Steve Carell is in. have to join people table => stars table => shows table
-- working down to granularity:
SELECT * FROM people WHERE name = 'Steve Carell';
SELECT id FROM people WHERE name = 'Steve Carell';
SELECT * FROM stars WHERE person_id = (SELECT id FROM people WHERE name = 'Steve Carell');
-- gives you all the show ids whose person_id is Steve Carell:
SELECT show_id FROM stars WHERE person_id = (SELECT id FROM people WHERE name = 'Steve Carell');
-- NOTE: it's "id" NOT "show_id" in the first clause because the "TABLE shows" uses just "id":
SELECT title FROM shows WHERE id IN (SELECT show_id FROM stars WHERE person_id = (SELECT id FROM people WHERE name = 'Steve Carell'));


-- KEYWORD "JOIN":
SELECT * FROM shows LIMIT 10;
SELECT * FROM genres LIMIT 10;
-- "shows" has an "id"
-- "genres" has a "show_id"
-- use . notation:
SELECT * FROM shows JOIN genres ON shows.id = genres.show_id WHERE title = 'The Office';
SELECT * FROM shows JOIN ratings ON shows.id = ratings.show_id WHERE title = 'The Office';


-- Same query as line 77 but using (EXPLICIT) JOIN:
-- first link connections to get from Steve Carell to show titles:
    -- connect people => stars => shows
-- Filter by people name:
    -- where people = 'Steve Carell'
-- Back at beginning, what you want in the end is Title
-- select title
SELECT title FROM people JOIN stars ON people.id = stars.person_id JOIN shows ON stars.show_id = shows.id WHERE name = 'Steve Carell';

-- using IMPLICIT JOIN:
SELECT title FROM people, stars, shows WHERE people.id = stars.person_id AND stars.show_id = shows.id AND name = 'Steve Carell';

-- If you don't know spelling
SELECT name FROM people WHERE name LIKE 'Steve C%' ORDER BY name ASC;

-- INDEXES:
CREATE INDEX name ON table (column, ...)
CREATE INDEX title_index ON shows (title);

-- Fuzzy search for last name:
select student_name from students where student_name like "%potter";

-- Insert
INSERT INTO tablename (column1, column2) VALUES (value1, value2);
INSERT INTO houses (house, head) VALUES ('Gryffindor', 'McGonagall');

-- Section Potter example:
SELECT *
FROM assignments
JOIN houses
ON assignments.house_id = houses.id;

SELECT COUNT(student_id) AS 'Gryffindor' FROM assignments
JOIN houses ON assignments.house_id = houses.id
WHERE houses.house = 'Gryffindor';

-- find all students with snape:
SELECT COUNT(student_id) AS 'Snape Students' FROM assignments
JOIN houses ON assignments.house_id = houses.id
WHERE houses.head = 'Severus Snape';

SELECT student_id, student_name FROM students, assignments, houses
WHERE students.id = assignments.student_id AND assignments.house_id = houses.id AND houses.head = 'Severus Snape';